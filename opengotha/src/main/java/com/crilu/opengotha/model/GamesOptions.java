package com.crilu.opengotha.model;

import com.crilu.opengotha.GeneralParameterSet;
import com.crilu.opengotha.TournamentInterface;
import com.crilu.opengotha.TournamentParameterSet;
import com.crilu.opengotha.components.JPanel;

import java.util.ArrayList;
import java.util.List;

public class GamesOptions {
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;
    private TournamentInterface tournament;

    public List<OnGamesOptionsListener> mCallbacks = new ArrayList<>();

    public JPanel pnlGam;
    public JPanel pnlTime;
    public boolean rdbCanByoYomi;
    public boolean rdbFischer;
    public boolean rdbStdByoYomi;
    public boolean rdbSuddenDeath;
    public String txfBasicTime;
    public String txfCanNbMoves;
    public String txfCanTime;
    public String txfFischerTime;
    public String txfKomi;
    public String txfSize;
    public String txfStdTime;

    public interface OnGamesOptionsListener {
        void onTitleUpdate(String title);
        void onUpdateEgfClass(String egfClass);
    }

    public GamesOptions(TournamentInterface tournament) {
        this.tournament = tournament;

        initComponents();
        customInitComponents();
    }

    public boolean addOnGamesOptionsListener(OnGamesOptionsListener listener) {
        return mCallbacks.add(listener);
    }

    public boolean removeOnGamesOptionsListener(OnGamesOptionsListener listener) {
        return mCallbacks.remove(listener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGam = new JPanel();
        pnlTime = new JPanel();

        txfSize = "19";
        txfKomi = "7.5";
        txfBasicTime = "0";

        rdbSuddenDeath = true;
        txfFischerTime = "5";

        txfStdTime = "30";
        txfCanTime = "300";
        txfCanNbMoves = "15";
    }// </editor-fold>//GEN-END:initComponents

    public void txfKomiFocusLost() {//GEN-FIRST:event_txfKomiFocusLost
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        gps.setStrKomi(txfKomi);
        tournament.setTournamentParameterSet(tps);
        this.tournamentChanged();
    }//GEN-LAST:event_txfKomiFocusLost

    public void txfSizeFocusLost() {//GEN-FIRST:event_txfSizeFocusLost
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        gps.setStrSize(txfSize);
        tournament.setTournamentParameterSet(tps);
        this.tournamentChanged();
    }//GEN-LAST:event_txfSizeFocusLost

    public void txfBasicTimeFocusLost() {//GEN-FIRST:event_txfBasicTimeFocusLost
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        int oldVal = gps.getBasicTime();
        int newVal = oldVal;
        try {
            newVal = Integer.parseInt(this.txfBasicTime);
        } catch (NumberFormatException e) {
            this.txfBasicTime = "" + oldVal;
            return;
        }
        if (newVal == oldVal) {
            return;
        }
        gps.setBasicTime(newVal);
        tournament.setTournamentParameterSet(tps);
        this.tournamentChanged();

    }//GEN-LAST:event_txfBasicTimeFocusLost

    public void rdbComplTimeSystemActionPerformed() {//GEN-FIRST:event_rdbComplTimeSystemActionPerformed
        TournamentParameterSet tps = null;
        GeneralParameterSet gps = null;
        tps = tournament.getTournamentParameterSet();
        gps = tps.getGeneralParameterSet();

        int oldComplementaryTimeSystem = gps.getComplementaryTimeSystem();
        int newComplementaryTimeSystem = GeneralParameterSet.GEN_GP_CTS_SUDDENDEATH;
        if (this.rdbSuddenDeath) {
            newComplementaryTimeSystem = GeneralParameterSet.GEN_GP_CTS_SUDDENDEATH;
        }
        if (this.rdbStdByoYomi) {
            newComplementaryTimeSystem = GeneralParameterSet.GEN_GP_CTS_STDBYOYOMI;
        }
        if (this.rdbCanByoYomi) {
            newComplementaryTimeSystem = GeneralParameterSet.GEN_GP_CTS_CANBYOYOMI;
        }
        if (this.rdbFischer) {
            newComplementaryTimeSystem = GeneralParameterSet.GEN_GP_CTS_FISCHER;
        }

        if (newComplementaryTimeSystem == oldComplementaryTimeSystem) {
            return;
        }

        gps.setComplementaryTimeSystem(newComplementaryTimeSystem);

        tournament.setTournamentParameterSet(tps);

        this.tournamentChanged();

    }//GEN-LAST:event_rdbComplTimeSystemActionPerformed

    public void txfStdTimeFocusLost() {//GEN-FIRST:event_txfStdTimeFocusLost
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        int oldVal = gps.getStdByoYomiTime();
        int newVal = oldVal;
        try {
            newVal = Integer.parseInt(this.txfStdTime);
        } catch (NumberFormatException e) {
            this.txfStdTime = "" + oldVal;
            return;
        }
        if (newVal == oldVal) {
            return;
        }
        gps.setStdByoYomiTime(newVal);
        tournament.setTournamentParameterSet(tps);
        this.tournamentChanged();
    }//GEN-LAST:event_txfStdTimeFocusLost

    public void txfCanTimeFocusLost() {//GEN-FIRST:event_txfCanTimeFocusLost
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        int oldVal = gps.getCanByoYomiTime();
        int newVal = oldVal;
        try {
            newVal = Integer.parseInt(this.txfCanTime);
        } catch (NumberFormatException e) {
            this.txfCanTime = "" + oldVal;
            return;
        }
        if (newVal == oldVal) {
            return;
        }
        gps.setCanByoYomiTime(newVal);
        tournament.setTournamentParameterSet(tps);
        this.tournamentChanged();
    }//GEN-LAST:event_txfCanTimeFocusLost

    public void txfFischerTimeFocusLost() {//GEN-FIRST:event_txfFischerTimeFocusLost
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        int oldVal = gps.getFischerTime();
        int newVal = oldVal;
        try {
            newVal = Integer.parseInt(this.txfFischerTime);
        } catch (NumberFormatException e) {
            this.txfFischerTime = "" + oldVal;
            return;
        }
        if (newVal == oldVal) {
            return;
        }
        gps.setFischerTime(newVal);
        tournament.setTournamentParameterSet(tps);
        this.tournamentChanged();
    }//GEN-LAST:event_txfFischerTimeFocusLost

    public void txfCanNbMovesFocusLost() {//GEN-FIRST:event_txfCanNbMovesFocusLost
        TournamentParameterSet tps = tournament.getTournamentParameterSet();
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        int oldVal = gps.getNbMovesCanTime();
        int newVal = oldVal;
        try {
            newVal = Integer.parseInt(this.txfCanNbMoves);
        } catch (NumberFormatException e) {
            this.txfCanNbMoves = "" + oldVal;
            return;
        }
        if (newVal == oldVal) {
            return;
        }
        gps.setNbMovesCanTime(newVal);
        tournament.setTournamentParameterSet(tps);
        this.tournamentChanged();
    }//GEN-LAST:event_txfCanNbMovesFocusLost

    private void customInitComponents() {
        this.updatePnlGam();
    }

    private void tournamentChanged() {
        tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());

        updateAllViews();
    }

    private void updateAllViews() {
        this.pnlGam.setVisible(true);
        this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
        setTitle("Games Settings. " + tournament.getFullName());
        updatePnlGam();
    }

    private void updatePnlGam() {
        GeneralParameterSet gps = null;
        gps = tournament.getTournamentParameterSet().getGeneralParameterSet();
        this.txfSize = gps.getStrSize();
        this.txfKomi = gps.getStrKomi();

        this.txfBasicTime = "" + gps.getBasicTime();

        int complTimeSystem = gps.getComplementaryTimeSystem();

        switch (complTimeSystem) {
            case GeneralParameterSet.GEN_GP_CTS_SUDDENDEATH:
                this.rdbSuddenDeath = true;
                break;
            case GeneralParameterSet.GEN_GP_CTS_STDBYOYOMI:
                this.rdbStdByoYomi = true;
                break;
            case GeneralParameterSet.GEN_GP_CTS_CANBYOYOMI:
                this.rdbCanByoYomi = true;
                break;
            case GeneralParameterSet.GEN_GP_CTS_FISCHER:
                this.rdbFischer = true;
                break;
        }

        this.txfStdTime = "" + gps.getStdByoYomiTime();
        this.txfCanNbMoves = "" + gps.getNbMovesCanTime();
        this.txfCanTime = "" + gps.getCanByoYomiTime();
        this.txfFischerTime = "" + gps.getFischerTime();

        // What EGF class ?
        String strClass = tournament.egfClass();
        String strMes = "";
        if (strClass.equals("C")) strMes = "EGF class C";
        if (strClass.equals("B")) strMes = "EGF class B";
        if (strClass.equals("A")) strMes = "EGF class A";

        this.updateEgfClass(strMes);
    }

    public TournamentInterface getTournament() {
        return tournament;
    }

    private void setTitle(String title) {
        for (OnGamesOptionsListener callback : mCallbacks) {
            callback.onTitleUpdate(title);
        }
    }

    private void updateEgfClass(String egfClass) {
        for (OnGamesOptionsListener callback : mCallbacks) {
            callback.onUpdateEgfClass(egfClass);
        }
    }

}
